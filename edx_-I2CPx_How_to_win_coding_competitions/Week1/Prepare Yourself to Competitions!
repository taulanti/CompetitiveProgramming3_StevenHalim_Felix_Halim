
import static java.lang.Integer.parseInt;
import static java.lang.System.exit;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.*;

public class Main {
	
   static void solve() throws Exception {
	   
	   int x = nextInt();
	   int [] p =new int[x];
	   int [] t = new int[x];
	   for (int i = 0; i < x; i++) {
		   p[i] = nextInt();
	   }
	   
	   for (int i = 0; i < x; i++) {
		   t[i] = nextInt();
	   }
	   
	   int max = 0;
	   boolean theory = false;
	   boolean practice = false;
	   int nrtheory = 0;
	   int nrpractice = 0;
	   
	   for (int i = 0; i < t.length; i++) {
		   nrtheory += t[i];
		   nrpractice += p[i];
	   }
	  
	   //test if parctice days or theory days are 0
	   if(nrtheory == 0)
		   max += nrpractice;
	   else if(nrpractice == 0)
		   max += nrtheory;
	   else{
		   for (int i = 0; i < x; i++) {
			   if(p[i] >= t[i]){
				   max += p[i];
				   practice = true;
			   }
			   else{
				   max += t[i];
				   theory = true;
			   }
		   }
		   
		   //if theory was not used
		   if(!theory){
			   int min = findPorT(p,t);
			   max -= p[min];
			   max += t[min];
		   }
		   else if(!practice){
			   int min = findPorT(p,t);
			   max -= t[min];
			   max += p[min];
		   }
	   }
	     
	   out.println(max);
   }
   
   static int findPorT(int [] p, int [] t){
	   int min = Integer.MAX_VALUE;
	   int result = 0;
	   for (int i = 0; i < t.length; i++) {
		   if(Math.abs(p[i]-t[i]) <= min){
			   min = Math.abs(p[i]-t[i]);
			   result = i;
		   }
	   }
	   return result;
   }
    	   
   static int nextInt() throws IOException {
       return parseInt(next());
   }
   
   static Double nextDouble()throws IOException{
	   return Double.parseDouble(next());
   }
   
   static long nextLong()throws IOException{
	   return Long.parseLong(next());
   }

   static String next() throws IOException {
       while (tok == null || !tok.hasMoreTokens()) {
           tok = new StringTokenizer(in.readLine());
       }
       return tok.nextToken();
   }

   public static void main(String[] args) {
       try {
    	   INPUT = new FileInputStream("prepare.in");
		   OUTPUT = new FileOutputStream("prepare.out");
           in = new BufferedReader(new InputStreamReader(INPUT));
           out = new PrintWriter(new OutputStreamWriter(OUTPUT));
           solve();
           in.close();
           out.close();
       } catch (Throwable e) {
           e.printStackTrace();
           exit(0);
       }
   }

   static BufferedReader in;
   static PrintWriter out;
   static InputStream INPUT = System.in;
   static OutputStream OUTPUT = System.out;
   static StringTokenizer tok;

}
