
import static java.lang.Integer.parseInt;
import static java.lang.System.exit;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Scanner;
import java.util.StringTokenizer;

public class BookletPrinting {

	static void solve() throws Exception {
		
		while(true){
			int nrPages = nextInt();
			if(nrPages == 0)break;
			
			int idx = nrPages % 4;
			HashMap<Integer,String> map = new HashMap<Integer,String>();
			for (int i = 0; i < nrPages+idx; i++) {
				if(i >= nrPages)map.put(i+1, "Blank");
				else		    map.put(i+1, Integer.toString(i+1));
			}
			
			
			int secN = 1;
			int nrSheet = 1;
			int firstN = map.size();
			System.out.printf("Printing order for %d pages:\n", nrPages);
			for (int i = 0; i < map.size()/2; i++) {
				if(i > 1 && i%2 == 0)nrSheet++;
				if(i % 2 == 0)System.out.printf("Sheet %d, front: %s, %s\n", nrSheet, map.get(firstN), map.get(secN));
				else 	     System.out.printf("Sheet %d, back: %s, %s\n", nrSheet, map.get(secN), map.get(firstN));
				secN++;
				firstN--;
			}		
		}
	}

	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			solve();
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(0);
		}
	}

	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;

}
